(define sample-current-row
  '(0 1 1 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0
    0 0 0 1 1 1 1 1 0 1 0 0 1 0 0 1 0 0))
(define sample-next-row
  '(1 0 1 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0
    0 0 1 0 0 0 0 1 0 1 1 1 1 1 1 1 1 0))
(define sample-rule 86)
(define sample-initial-row
  '(1 1 1 0 1 1 0))
(define sample-ra-result
  '((1 1 1 0 1 1 0)
    (0 0 1 0 0 1 1)
    (0 1 1 1 1 0 1)
    (1 0 0 0 1 0 1)))
(check-expect (apply-rule 1 1 1 86) 0)
(check-expect (apply-rule 1 1 0 86) 1)
(check-expect (apply-rule 1 0 1 86) 0)
(check-expect (apply-rule 1 0 0 86) 1)
(check-expect (apply-rule 0 1 1 86) 0)
(check-expect (apply-rule 0 1 0 86) 1)
(check-expect (apply-rule 0 0 1 86) 1)
(check-expect (apply-rule 0 0 0 86) 0)
(check-expect (apply-rule 1 1 1 0) 0)
(check-expect (apply-rule 0 0 0 255) 1)
(check-expect (next-row sample-current-row sample-rule)
              sample-next-row)
(check-expect (next-row '(1) 86) '(1))
(check-expect (next-row '(1 0) 86) '(1 1))
(check-expect (next-row '() 86) '())
(check-expect (next-row '(1) 86) '(1))
(check-expect (next-row '(1 0) 86) '(1 1))
(check-expect (next-row '() 86) '())
(check-expect (iterate sqr 2 4) '(2 4 16 256))
(check-expect (iterate add1 2 5) '(2 3 4 5 6))
(check-expect (iterate sqrt 256 4) '(256 16 4 2))
(check-expect (run-automaton sample-initial-row sample-rule 4)
              sample-ra-result)
(check-expect (run-automaton sample-initial-row sample-rule 4)
              sample-ra-result)